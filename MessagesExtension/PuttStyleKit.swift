//
//  PuttStyleKit.swift
//  PuttPutt
//
//  Created by Jonah Witcig on 11/18/16.
//  Copyright Â© 2016 JwitApps. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PuttStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawHole(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let holeFill = UIColor(red: 0.437, green: 0.437, blue: 0.437, alpha: 1.000)
        let holeStroke = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 44.5, height: 44.5))
        holeFill.setFill()
        ovalPath.fill()
        holeStroke.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawBall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Color Declarations
        let ballFill = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 144, height: 144))
        ballFill.setFill()
        ovalPath.fill()
        UIColor.black.setStroke()
        ovalPath.lineWidth = 6
        ovalPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, angle: CGFloat = 0, scale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Color Declarations
        let arrowFill = UIColor(red: 0.995, green: 0.222, blue: 0.222, alpha: 1.000)
        let arrowStroke = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 150, y: 150)
        context.rotate(by: -angle * CGFloat.pi/180)
        context.scaleBy(x: 1, y: scale)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: -148.5))
        bezierPath.addCurve(to: CGPoint(x: -40, y: -100.84), controlPoint1: CGPoint(x: -0.09, y: -148.5), controlPoint2: CGPoint(x: -40, y: -100.84))
        bezierPath.addLine(to: CGPoint(x: -9.41, y: -119.09))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: -119.09))
        bezierPath.addLine(to: CGPoint(x: 40, y: -100.84))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: -148.5), controlPoint1: CGPoint(x: 40, y: -100.84), controlPoint2: CGPoint(x: 1.09, y: -148.5))
        bezierPath.close()
        arrowFill.setFill()
        bezierPath.fill()
        arrowStroke.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 400), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 400), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 400)


        //// Color Declarations
        let wallFill = UIColor(red: 0.742, green: 0.320, blue: 0.800, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 20, height: 400))
        wallFill.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
